{
    "variables": {},
    "globals":
    {
        // example docs
        //"background": "var(black)",
        //"foreground": "var(white)",
        //"caret": "color(var(white) alpha(0.8))"

        /* order by docs */

        /** Globals */
        "background":                       "var(bg-color)",
        "foreground":                       "var(fg-color)", // Popup definiton/reference text
        "invisibles":                       "var(invisibles)",
        "caret":                            "var(caret)", // mouser cursor
        "line_highlight":                   "var(line-highlight)",
        /** Accents */
        "misspelling":                      "var(misspelling)", // when spell_check is enabled
        "fold_marker":                      "var(fold-marker)", // when folded, the "..."
        "minimap_border":                   "var(minimap-border)", // when draw_minimap_border is enabled
        "accent":                           "var(accent)",
        /** Css */
        // Popup css: Example, bg color, link color, title color of Popup definiton/reference. 
        // Round corner, border, bg comes from Theme file.
        "popup_css":                        "var(popup-css)",
        "phantom_css":                      "var(phantom-css)",
        // "sheet_css": ,
        /** Gutter */
        "gutter":                           "var(gutter)",
        "gutter_foreground":                "var(gutter-foreground)",
        "gutter_foreground_highlight":      "var(gutter-foreground-hl)",
        /** Diff */
        "line_diff_added":                  "var(line-diff-added)",
        "line_diff_modified":               "var(line-diff-modified)",
        "line_diff_deleted":                "var(line-diff-deleted)",
        /** Selection */
        "selection":                        "var(selection)",
        "selection_foreground":             "var(selection-fg)",
        "selection_border":                 "var(selection-border)",
        "selection_border_width":           "var(selection-border-width)",
        "inactive_selection":               "var(inactive-selection)",
        "inactive_selection_foreground":    "var(inactive-selection-fg)",
        "selection_corner_style":           "var(selection-corner-style)",
        "selection_corner_radius":          "var(selection-corner-radius)",
        /** Find */
        "highlight":                        "var(highlight)",
        "find_highlight":                   "var(find-highlight)",
        "find_highlight_foreground":        "var(find-highlight-fg)",
        "scroll_highlight":                 "var(scroll-highlight)",
        /** Rulers */
        "rulers":                           "var(rulers)",
        /** Guides */
        "guide":                            "var(guide)",
        // active_guide and stack_guide
        // Only used if the option "draw_active" is present in the setting indent_guide_options.
        "active_guide":                     "var(active-guide)",
        "stack_guide":                      "var(stack-guide)",
        /** Brackets */
        "brackets_options":                 "var(brackets-opts)",
        "brackets_foreground":              "var(brackets-fg)",
        "bracket_contents_options":         "var(bracket-contents-opts)",
        "bracket_contents_foreground":      "var(bracket-contents-fg)",
        /** Tags */
        // HTML and XML tags
        "tags_options":                     "var(tags-opts)",
        "tags_foreground":                  "var(tags-fg)",
        /** Shadows */
        "shadow":                           "var(shadow)",
        "shadow_width":                     "var(shadow-width)"
    },
    "rules":
    [
        // Minimal recommended setup
        // entity.name
        // entity.other.inherited-class
        // entity.name.section
        // entity.name.tag
        // entity.other.attribute-name
        // variable
        // variable.language
        // variable.parameter
        // variable.function
        // constant
        // constant.numeric
        // constant.language
        // constant.character.escape
        // storage.type
        // storage.modifier
        // support
        // keyword
        // keyword.control
        // keyword.operator
        // keyword.declaration
        // string
        // comment
        // invalid
        // invalid.deprecated

        // Scope naming
        // https://www.sublimetext.com/docs/3/scope_naming.html

        // Packages syntax
        // https://github.com/sublimehq/Packages/blob/master/Rust/Rust.sublime-syntax

        /**
         *
         * ENTITY
         *
         */
        {
            // "name": "Entity name",
            "scope": "entity.name",
            "foreground": "var(entity-name-fg)"
        },
        {
            // "name": "Entity name class",
            "scope": "entity.name.class",
            "foreground": "var(entity-name-class-fg)"
        },
        {
            // "name": "Entity name function",
            "scope": "entity.name.function", // function name
            "foreground": "var(entity-name-fn-fg)"
        },
        {
            // "name": "Entity other inherited class", // python, ruby
            "scope": "entity.other.inherited-class",
            "foreground": "var(entity-inherited-class-fg)"
        },
        // {
        //     "name": "Entity name section",
        //     "scope": "entity.name.section",
        //     "foreground": "var(entity-name-section-fg)" 
        // },
        // {
        //     "name": "Entity name tag",
        //     "scope": "entity.name.tag",
        //     "foreground": "var(entity-name-tag-fg)"
        // },
        {
            // "name": "Entity other attribute name", // html i.e. class
            "scope": "entity.other.attribute-name",
            "foreground": "var(entity-attribute-name-fg)"
        },
        {
            // "name": "Entity other pseudo class", // css i.e. :root
            "scope": "entity.other.pseudo-class",
            "foreground": "var(entity-other-pseudo-class-fg)"
        },

        /**
         *
         * VARIABLE
         *
         */
        // {
        //     "name": "Variable",
        //     "scope": "variable", // js: vars - fun, imports
        //     "foreground": "var(variable-fg)"
        // },
        // {
        //     "name": "Variable language",
        //     "scope": "variable.language",
        //     "font_style": "var(variable-lang-font-style)",
        //     "foreground": "var(variable-lang-fg)"
        // },
        // {
        //     "name": "Variable parameter",
        //     "scope": "variable.parameter",
        //     "foreground": "var(variable-param-fg)"
        // },
        {
            // "name": "Variable function",
            "scope": "variable.function",
            "foreground": "var(variable-fn-fg)"
        },
        {
            // "name": "Variable other constant", // i.e. Class nodejs
            "scope": "variable.other.constant",
            "foreground": "var(variable-other-constant-fg)"
        },
        // Rust scopes
        {
            // "name": "Variable other member",
            "scope": "variable.other.member - meta.block.rust",
            "foreground": "var(variable-other-member-fg)"
        },

        /**
         *
         * CONSTANT
         *
         */
        // {
        //     "name": "Constant",
        //     "scope": "constant",
        //     "foreground": "var(constant-fg)"
        // },
        {
            // "name": "Constant numeric",
            "scope": "constant.numeric",
            "foreground": "var(constant-num-fg)"
        },
        {
            // "name": "Constant language", // Built-in
            "scope": "constant.language",
            "foreground": "var(constant-lang-fg)"
        },
        {
            // "name": "Constant language null",
            "scope": "constant.language.null",
            "foreground": "var(constant-lang-null-fg)"
        },
        {
            // "name": "Constant language boolean",
            "scope": "constant.language.boolean",
            "foreground": "var(constant-lang-bool-fg)"
        },
        // {
        //     "name": "Constant character escape",
        //     "scope": "constant.character.escape",
        //     "foreground": "var(constant-char-escape-fg)"
        // },

        /**
         *
         * STORAGE
         *
         */
        // {
        //     "name": "Storage", // fn methods
        //     "scope": "storage",
        //     "foreground": "var(storage-fg)"
        // },
        {
            // "name": "Storage modifier", // pub
            "scope": "storage.modifier",
            "foreground": "var(storage-modifier-fg)"
        },
        // Rust scopes
        {
            // "name": "Storage type",
            "scope": "storage.type",
            "foreground": "var(storage-type-fg)"
        },

        /**
         *
         * SUPPORT
         *
         */
        // {
        //     "name": "Support",
        //     "scope": "support", // i.e. js: document, console.log
        //     "foreground": "var(support-fg)"
        // },
        {
            // "name": "Support function",
            "scope": "support.function",
            "foreground": "var(support-fn-fg)"
        },
        {
            // "name": "Support class",
            "scope": "support.class", // i.e: Js Object, Array
            "foreground": "var(support-class-fg)"
        },
        {
            // "name": "Support type primitive",
            "scope": "support.type.primitive", // js: number, string
            "foreground": "var(support-type-primitive-fg)"
        },

        /**
         *
         * KEYWORD
         *
         */
        {
            // "name": "Keyword",
            "scope": "keyword",
            "foreground": "var(keyword-fg)"
        },
        // {
        //     "name": "Keyword control",
        //     "scope": "keyword.control",
        //     "foreground": "var(keyword-ctrl-fg)"
        // },
        {
            // "name": "Keyword operator",
            "scope": "keyword.operator",
            "foreground": "var(keyword-operator-fg)"
        },
        // {
        //     "name": "Keyword declaration",
        //     "scope": "keyword.declaration",
        //     "foreground": "var(keyword-declaration-fg)"
        // },

        /**
         *
         * STRING
         *
         */
        {
            // "name": "String",
            "scope": "string",
            "foreground": "var(string-fg)"
        },

        /**
         *
         * COMMENT
         *
         */
        {
            // "name": "Comment",
            "scope": "comment",
            "foreground": "var(comment-fg)"
        },

        /**
         *
         * INVALID
         *
         */
        // {
        //     "name": "Invalid",
        //     "scope": "invalid",
        //     "foreground": "var(invalid-fg)"
        // },
        {
            // "name": "Invalid deprecated",
            "scope": "invalid.deprecated",
            "foreground": "var(invalid-deprecated-fg)"
        },
        {
            // "name": "Invalid illegal",
            "scope": "invalid.illegal",
            "background": "var(invalid-illegal-fg)"
        },

        /**
         *
         * DIFF
         *
         */
        {
            // "name": "Markup changed",
            "scope": "markup.changed",
            "background": "var(markup-changed-bg)",
            "foreground": "var(markup-changed-fg)"
        },
        {
            // "name": "Markup deleted",
            "scope": "markup.deleted",
            "background": "var(markup-deleted-bg)",
            "foreground": "var(markup-deleted-fg)"
        },
        {
            // "name": "Markup inserted",
            "scope": "markup.inserted",
            "background": "var(markup-inserted-bg)",
            "foreground": "var(markup-inserted-fg)"
        },
        {
            // "name": "Diff header",
            "scope": "meta.diff, meta.diff.header",
            "background": "var(meta-diff-header-bg)",
            "foreground": "var(meta-diff-header-fg)"
        },

        /**
         *
         * INLINE DIFFS
         *
         */
        {
            // "name": "Inline diff deleted",
            "scope": "diff.deleted",
            "background": "var(diff-deleted-bg)",
            "foreground": "var(diff-deleted-fg)"
        },
        {
            // "name": "Inline diff deleted char",
            "scope": "diff.deleted.char",
            "background": "var(diff-deleted-char-bg)",
            "foreground": "var(diff-deleted-char-fg)"
        },
        {
            // "name": "Inline diff inserted",
            "scope": "diff.inserted",
            "background": "var(diff-inserted-bg)",
            "foreground": "var(diff-inserted-fg)"
        },
        {
            // "name": "Inline diff inserted char",
            "scope": "diff.inserted.char",
            "background": "var(diff-inserted-char-bg)",
            "foreground": "var(diff-inserted-char-fg)"
        },

        /**
         *
         * MAPPING KEY VALUE AND SEQUENCE
         *
         */
        {
            // "name": "Mapping key",
            "scope": "meta.mapping.key, meta.mapping.key string", // Json text
            "foreground": "var(meta-mapping-key-fg)"
        },
        {
            // "name": "Mapping value",
            "scope": "meta.mapping.value, meta.mapping.value string", // Json text, Yaml and JS not working
            "foreground": "var(meta-mapping-value-fg)"
        },
        // Open and close bracket json, yaml
        // More generic, removing ( json | yaml ) because it is mixing inside other lang codes.
        {
            // "name": "Punctuation section mapping",
            "scope": "punctuation.section.mapping.begin, punctuation.section.mapping.end",
            "foreground": "var(punctuation-section-mapping-fg)"
        },
        {
            // "name": "Punctuation section sequence separator",
            "scope": "punctuation.section.sequence.begin, punctuation.section.sequence.end, punctuation.separator.sequence, punctuation.separator.key-value",
            "foreground": "var(punctuation-section-sequence-separator-fg)"
        },

        /**
         *
         * SHELL
         *
         */
        {
            // "name": "Line constant shebang",
            "scope": "comment.line.shebang constant.language.shebang",
            "foreground": "var(line-constant-shebang-fg)"
        },

        /** LANGUAGES RULES */

        /**
         *
         * CSS
         *
         */
        {
            // "name": "At rule other css", // i.e @width
            "scope": "meta.at-rule.other.css",
            "foreground": "var(meta-at-rule-other-css-fg)"
        },
        {
            // "name": "Constant css", // i.e. css #000
            "scope": "source.css constant",
            "foreground": "var(constant-css-fg)"
        },
        {
            // "name": "Entity name tag css",
            "scope": "entity.name.tag.html.css",
            "foreground": "var(entity-name-tag-css-fg)"
        },
        {
            // "name": "Support property name and meta property type vendor css", // i.e Margin:
            "scope": "support.type.property-name.css, meta.property-name.css support.type.vendor-prefix.css",
            "foreground": "var(support-property-css-fg)"
        },
        {
            // "name": "Meta selector support type vendor prefix css",
            "scope": "meta.selector.css support.type.vendor-prefix.css, meta.selector.css punctuation.definition.pseudo-class.css",
            "foreground": "var(meta-selector-support-type-vendor-prefix-css-fg)"
        },
        {
            // "name": "Css variable", // i.e css variables --black: 
            "scope": "entity.other.custom-property.css, meta.property-value.css variable.other.custom-property.css",
            "foreground": "var(css-variable-fg)"
        },

        /**
         *
         * ELIXIR
         *
         */
         // Package ElixirSyntax
        {
            // "name": "Constant other keyword elixir",
            "scope": "constant.other.keyword.elixir",
            "foreground": "var(constant-other-keyword-elixir-fg)"
        },
        {
            // "name": "Constant other symbol elixir",
            "scope": "constant.other.symbol.elixir",
            "foreground": "var(constant-other-symbol-elixir-fg)"
        },
        {
            // "name": "Doc string quoted triple elixir",
            "scope": "meta.doc.elixir meta.string.elixir string.quoted.triple.double.elixir",
            "foreground": "var(doc-string-quoted-triple-elixir-fg)"
        },
        {
            // "name": "Support attribute, keyword  and entity name constant elixir",
            "scope": "support.attr.elixir, support.attr.doc.elixir, keyword.operator.attribute.elixir, meta.function-call.arguments.elixir entity.name.constant.elixir",
            "foreground": "var(support-attr-entity-name-const-elixir-fg)"
        },
        {
            // "name": "Variable other constant elixir",
            "scope": "meta.embedded.eex meta.function-call.arguments.elixir variable.other.constant.elixir, meta.embedded.heex variable.other.constant.elixir, meta.function-call.arguments.elixir meta.block.elixir meta.brackets.elixir variable.other.constant.elixir",
            "foreground": "var(var-other-constant-elixir-fg)"
        },

        /**
         *
         * GO
         *
         */
        // {
        //     // Coloring too many
        //     "name": "Meta block variable other go",
        //     "scope": "meta.block.go meta.block.go variable.other.go",
        //     "foreground": "var(meta-block-variable-other-go-fg)"
        // },
        {
            // "name": "Variable other readwrite declaration go",
            "scope": "variable.other.readwrite.declaration.go",
            "foreground": "var(variable-other-readwrite-declaration-go-fg)"
        },
        {
            // "name": "Storage type go",
            "scope": "storage.type.go",
            "foreground": "var(storage-type-go-fg)"
        },
        {
            // "name": "Storage Support type builtin go", // i.e. string/bool/float
            "scope": "storage.type.go support.type.builtin.go",
            "foreground": "var(storage-support-type-builtin-go-fg)"
        },

        /**
         *
         * GIT
         *
         */
        {
            // "name": "Entity name patthen git ignore wildcard asterisk",
            "scope": "entity.name.pattern.git.ignore constant.other.wildcard.asterisk.fnmatch.git",
            "foreground": "var(entity-name-git-ignore-const-wildcard-asterisk-fg)"
        },
        {
            // "name": "Git attributes value",
            "scope": "meta.mapping.key.git.attributes variable.language.attribute.git.attributes",
            "foreground": "var(meta-mapping-value-git-attributes-fg)"
        },

        /**
         *
         * HTML
         *
         */
        {
            // "name": "Entity id html", // i.e. id
            "scope": "text.html entity.other.attribute-name.id",
            "foreground": "var(entity-other-attribute-name-html-fg)"
        },

        /**
         *
         * JAVA
         *
         */
        {
            // "name": "Meta import wildcard asterisk java",
            "scope": "meta.import.java constant.other.wildcard.asterisk.java",
            "foreground": "var(meta-import-wildcard-asterisk-java-fg)"
        },

        /**
         *
         * JAVASCRIPT
         *
         */
        {
            // "name": "Entity name type interface",
            "scope": "entity.name.type.js, entity.name.interface.js",
            "foreground": "var(entity-name-type-interface-js-fg)"
        },
        {
            // "name": "JSDocs tags",
            "scope": "entity.other.attribute-name.documentation.js",
            "foreground": "var(entity-other-attribute-name-doc-js-fg)"
        },
        {
            // "name": "Keyword declaration function arrow js",
            "scope": "keyword.declaration.function.arrow.js, meta.type.js keyword.declaration.function.js",
            "foreground": "var(keyword-declaration-fn-arrow-js-fg)"
        },
        {
            // "name": "Support other js", // e.g. name from adaptiveData.name
            "scope": "(source.js | source.ts) - comment - string - keyword - punctuation - storage - entity - variable - support.constant - support - constant.language.boolean - constant.numeric.value, meta.class.js variable.other.readwrite.js - meta.binding.name.js - meta.function.js",
            "foreground": "var(support-other-js-fg)"
        },
        {
            // "name": "Support meta class js",
            "scope": "meta.class.js support.constant.builtin.js, meta.function-call.constructor.js variable.type.js",
            "foreground": "var(support-meta-class-js-fg)"
        },
        {
            // "name": "Support meta function js",
            "scope": "support.constant.node.js, support.constant.builtin.js",
            "foreground": "var(support-meta-fn-js-fg)"
        },
        {
            // "name": "Variable other class js", // i.e. Class new
            "scope": "source.js variable - variable.function - variable.other.constant - variable.other.readwrite - variable.language - variable.parameter",
            "foreground": "var(variable-other-class-js-fg)"
        },

        /**
         *
         * MARKDOWN / MARKUP
         *
         */
        {
            // "name": "Constant other language name md",
            "scope": "constant.other.language-name.markdown",
            "foreground": "var(constant-other-lang-name-md-fg)"
        },
        {
            // "name": "Markup heading",
            "scope": "markup.heading, markup.heading entity.name",
            "font_style": "var(markup-heading-font-style)",
            "foreground": "var(markup-heading-fg)"
        },
        {
            // "name": "Markup bold",
            "scope": "markup.bold",
            "font_style": "var(markup-bold-font-style)"
        },
        {
            // "name": "Markup italic",
            "scope": "markup.italic",
            "font_style": "var(markup-italic-font-style)"
        },
        {
            // "name": "Markup underline",
            "scope": "markup.underline",
            "font_style": "var(markup-underline-font-style)"
        },
        {
            // "name": "Markup bold/italic",
            "scope": "markup.italic markup.bold | markup.bold markup.italic",
            "font_style": "var(markup-bold-italic-font-style)"
        },
        {
            // "name": "Markup bold/underline",
            "scope": "markup.underline markup.bold | markup.bold markup.underline",
            "font_style": "var(markup-bold-underline-font-style)"
        },
        {
            // "name": "Markup italic/underline",
            "scope": "markup.underline markup.italic | markup.italic markup.underline",
            "font_style": "var(markup-italic-underline-font-style)"
        },
        {
            // "name": "Markup bold/italic/underline",
            "scope": "markup.bold markup.italic markup.underline | markup.bold markup.underline markup.italic | markup.italic markup.bold markup.underline | markup.italic markup.underline markup.bold | markup.underline markup.bold markup.italic | markup.underline markup.italic markup.bold",
            "font_style": "var(markup-bold-italic-underline-font-style)"
        },
        {
            // "name": "Markup quote",
            "scope": "markup.quote",
            "font_style": "var(markup-quote-font-style)",
            "foreground": "var(markup-quote-fg)"
        },
        {
            // "name": "Markup raw code block",
            "scope": "markup.raw",
            "background": "var(markup-raw-bg)"
        },
        {
            // "name": "Markup raw inline code",
            "scope": "markup.raw.inline.markdown",
            "background": "var(markup-raw-inline-bg)"
        },
        {
            // "name": "Markup underline link",
            "scope": "markup.underline.link",
            "foreground": "var(markup-link-fg)"
        },
        {
            // "name": "Table md",
            "scope": "meta.table.header.markdown-gfm, meta.table.header-separator.markdown-gfm, meta.table.markdown-gfm",
            "background": "var(markup-table-bg)"
        },
        {
            // "name": "Punctuation line break md",
            "scope": "punctuation.definition.hard-line-break.markdown",
            "background": "var(punctuation-line-break-md-bg)"
        },

        /**
         *
         * PHP
         *
         */
        {
            // "name": "Phpdocs tags",
            "scope": "embedding.php text.html.php meta.embedded.php source.php.embedded.html comment.block.documentation.phpdoc.php entity.name.tag.documentation.phpdoc.php",
            "foreground": "var(entity-name-tag-doc-php-fg)"
        },
        {
            // "name": "Punctuation definition variable php",
            "scope": "embedding.php text.html.php meta.embedded.php punctuation.definition.variable.php",
            "foreground": "var(punctuation-definition-var-php-fg)"
        },
        {
            // "name": "Punctuation section embedded php",
            "scope": "embedding.php text.html.php meta.embedded.php punctuation.section.embedded",
            "foreground": "var(punctuation-section-embedded-php-fg)"
        },

        /**
         *
         * PYTHON
         *
         */
        {
            // "name": "Constant other placeholder python",
            "scope": "meta.string.python string.quoted.single.python constant.other.placeholder.python",
            "foreground": "var(constant-other-placeholder-python-fg)"
        },
        {
            // "name": "Keyword control loopp in python",
            "scope": "meta.statement.loop.for.python keyword.control.loop.for.in.python",
            "foreground": "var(keyword-control-loop-in-python-fg)"
        },
        {
            // "name": "Meta annotation python",
            "scope": "meta.annotation.python punctuation.definition.annotation.python, meta.annotation.python meta.path.python meta.generic-name.python, meta.annotation.python meta.function-call.identifier.python variable.annotation.python - meta.path.python variable.annotation.python",
            "foreground": "var(meta-annotation-python-fg)"
        },
        {
            // "name": "Meta function call arguments string quoted python",
            "scope": "meta.function-call.arguments.python meta.mapping.value.python string.quoted.single.python",
            "foreground": "var(meta-fn-arg-string-quoted-python-fg)"
        },
        {
            // "name": "Meta mapping value string interpolation python",
            "scope": "meta.mapping.value.python meta.string.python meta.interpolation.python source.python.embedded, meta.mapping.value.python meta.string.python meta.interpolation.python punctuation.section.interpolation.end.python, meta.mapping.value.python meta.string.python meta.interpolation.python punctuation.section.interpolation.begin.python",
            "foreground": "var(meta-mapping-value-string-interpolation-python-fg)"
        },
        {
            // "name": "Meta function call support type python",
            "scope": "support.type.python", // "meta.function-call.identifier.python support.type.python, meta.function.return-type.python support.type.python",
            "foreground": "var(support-type-python-fg)"
        },
        // {
        //     "name": "Meta qualified name function", // want to color only Class but coloring functions too
        //     "scope": "meta.function-call.python meta.qualified-name.python variable.function.python meta.generic-name.python",
        //     "foreground": "var(meta-qualified-name-fn-python-fg)"
        // },

        /**
         *
         * RUBY
         *
         */
        {
            // "name": "Entity name class ruby",
            "scope": "entity.name.class.ruby",
            "foreground": "var(entity-name-class-ruby-fg)"
        },
        {
            // "name": "Constant ruby",
            "scope": "source.ruby constant",
            "foreground": "var(constant-rb-fg)"
        },
        {
            // "name": "Meta class ruby",
            "scope": "meta.class.ruby entity.other.inherited-class.ruby",
            "foreground": "var(meta-class-ruby-fg)"
        },
        {
            // "name": "Meta require ruby",
            "scope": "meta.require.ruby - punctuation.definition.group.begin.ruby - punctuation.definition.group.end.ruby - punctuation.separator.sequence.ruby",
            "foreground": "var(meta-require-ruby-fg)"
        },
        {
            // "name": "Variable other readwrite instance ruby", //i.e. @article
            "scope": "variable.other.readwrite.instance.ruby",
            "foreground": "var(variable-other-readwrite-instance-ruby-fg)"
        },

        /**
         *
         * RUST
         *
         */
        {
            // "name": "Entity name rust",
            "scope": "source.rust entity.name - entity.name.function.rust - entity.name.label.rust - entity.name.macro.rust - entity.name.module.rust",
            "foreground": "var(entity-name-rust-fg)"
        },
        {
            // "name": "Entity name function",
            "scope": "entity.name.function.rust",
            "foreground": "var(entity-name-fn-rust-fg)"
        },
        {
            // "name": "Entity name module",
            "scope": "entity.name.module.rust",
            "foreground": "var(entity-name-module-rust-fg)"
        },
        {
            // "name": "Keyword control rust",
            "scope": "keyword.control.rust",
            "foreground": "var(keyword-ctrl-rust-fg)"
        },
        {
            // "name": "Meta annotation path rust",
            "scope": "meta.annotation.rust meta.path.rust, meta.annotation.rust punctuation.definition.annotation.rust, meta.annotation.rust punctuation.section.group.begin.rust, meta.annotation.rust punctuation.section.group.end.rust",
            "foreground": "var(meta-annotation-path-rust-fg)"
        },
        // {
        //     "name": "Meta function rust",
        //     "scope": "meta.function.rust meta.block.rust - meta.group.rust - meta.path.rust",
        //     "foreground": "var(meta-fn-rust-fg)"
        // },
        {
            // "name": "Storage type rust",
            "scope": "storage.type.rust",
            "foreground": "var(storage-type-rust-fg)"
        },
        {
            // "name": "Storage type source rust",
            "scope": "storage.type.source.rust",
            "foreground": "var(storage-type-source-rust-fg)"
        },
        {
            // "name": "Support macro rust",
            "scope": "support.macro.rust",
            "foreground": "var(support-macro-rust-fg)"
        },
        {
            // "name": "Support type rust",
            "scope": "support.type.rust",
            "foreground": "var(support-type-rust-fg)"
        },

        /**
         *
         * SASS/SCSS
         *
         */
         // Package Sass
        {
            // "name": "Constant sass",
            "scope": "source.sass constant.other.color.rgb-value.css, source.scss constant.other.color.rgb-value.css",
            "foreground": "var(constant-sass-fg)"
        },
        {
            // "name": "Parameter sass",
            "scope": "meta.map.arguments.sass variable.parameter.sass",
            "foreground": "var(params-sass-fg)"
        },
        {
            // "name": "String scss", // Fix plugin sass, after upgrade, do not identify @use with multiple strings
            "scope": "source.scss meta.selector.css entity.name.tag.other.css, source.scss meta.selector.css entity.name.tag.html.css",
            "foreground": "var(string-scss-fg)"
        },
        {
            // "name": "Variable sass/scss",
            "scope": "variable.declaration.sass, variable.other.sass, meta.map.arguments.sass variable.other.sass, meta.function.parameters.sass variable.parameter.sass, source.sass meta.selector.css, source.sass meta.selector.css entity.name.tag.custom.css, variable.other.scss, meta.parameter.identifier.scss variable.parameter.scss, meta.argument.identifier.scss variable.parameter.scss",
            "foreground": "var(variable-sass-fg)"
        },

        /**
         *
         * SQL
         *
         */
        {
            // "name": "Keyword operator logical sql",
            "scope": "keyword.operator.logical.sql",
            "foreground": "var(keyword-operator-logical-sql-fg)"
        },
        {
            // "name": "Storage type sql",
            "scope": "storage.type.sql",
            "foreground": "var(storage-type-sql-fg)"
        },

        /**
         *
         * TOML
         *
         */
         // Package TOML
        {
            // "name": "Table toml",
            "scope": "entity.name.table.toml",
            "foreground": "var(entity-name-table-toml-fg)"
        },
        {
            // "name": "Key toml",
            "scope": "entity.name.tag.toml",
            "foreground": "var(entity-name-tag-toml-fg)"
        },

        /**
         *
         * YAML
         *
         */
        {
            // "name": "YAML meta directive",
            "scope": "meta.directive.yaml punctuation.definition.directive.begin.yaml, meta.directive.yaml keyword.other.directive.yaml, meta.directive.yaml constant.numeric.yaml-version.yaml",
            "foreground": "var(meta-directive-yaml-fg)"
        }

    ]
}